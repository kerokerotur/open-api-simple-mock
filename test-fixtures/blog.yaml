openapi: 3.0.0
info:
  title: Blog API
  description: A simple blog API for testing YAML format
  version: 1.0.0
servers:
  - url: https://blog.example.com/api/v1
paths:
  /users:
    get:
      summary: List all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                users:
                  summary: Sample users
                  value:
                    - id: 1
                      username: johndoe
                      email: john@example.com
                      posts_count: 5
                    - id: 2
                      username: janedoe
                      email: jane@example.com
                      posts_count: 3
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
            examples:
              newUser:
                summary: New user example
                value:
                  username: newuser
                  email: newuser@example.com
                  password: secret123
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                createdUser:
                  summary: Created user
                  value:
                    id: 3
                    username: newuser
                    email: newuser@example.com
                    posts_count: 0
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                validation:
                  summary: Validation error
                  value:
                    error: Validation failed
                    message: Username already exists

  /users/{userId}:
    get:
      summary: Get user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                user:
                  summary: User details
                  value:
                    id: 1
                    username: johndoe
                    email: john@example.com
                    posts_count: 5
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}/posts:
    get:
      summary: Get posts by user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            maximum: 100
      responses:
        '200':
          description: User posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
              examples:
                posts:
                  summary: User posts
                  value:
                    - id: 1
                      title: First Post
                      content: This is my first blog post
                      author_id: 1
                      created_at: '2024-01-15T10:30:00Z'
                      tags: [introduction, first-post]
                    - id: 2
                      title: Second Post
                      content: Another interesting blog post
                      author_id: 1
                      created_at: '2024-01-16T14:20:00Z'
                      tags: [tutorial, coding]

  /posts:
    get:
      summary: List all posts
      parameters:
        - name: tag
          in: query
          schema:
            type: string
          description: Filter posts by tag
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  total:
                    type: integer
                    example: 50
                  page:
                    type: integer
                    example: 1
    post:
      summary: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postId}:
    get:
      summary: Get post by ID
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Post found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      required: [id, username, email]
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: john@example.com
        posts_count:
          type: integer
          example: 5

    NewUser:
      type: object
      required: [username, email, password]
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: newuser
        email:
          type: string
          format: email
          example: newuser@example.com
        password:
          type: string
          minLength: 8
          example: secret123

    Post:
      type: object
      required: [id, title, content, author_id]
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: My First Post
        content:
          type: string
          example: This is the content of my blog post
        author_id:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          format: date-time
          example: '2024-01-15T10:30:00Z'
        tags:
          type: array
          items:
            type: string
          example: [tutorial, programming]

    NewPost:
      type: object
      required: [title, content]
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          example: New Blog Post
        content:
          type: string
          minLength: 1
          example: Content of the new blog post
        tags:
          type: array
          items:
            type: string
          example: [programming, tutorial]

    Error:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
          example: Bad Request
        message:
          type: string
          example: The request was invalid